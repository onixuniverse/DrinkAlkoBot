import re

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove

from db import db
from keyboards import alcohol, general


class FSMAddDrink(StatesGroup):
    tg_id = State()
    drink = State()
    date = State()
    quantity = State()
    price = State()


async def alcohol_start(message: types.Message):
    await FSMAddDrink.drink.set()

    await message.answer("üç∏ –ò—Ç–∞–∫, –∫–∞–∫–æ–π –Ω–∞–ø–∏—Ç–æ–∫ –í—ã –≤—ã–ø–∏–ª–∏?", reply_markup=alcohol.drinks_keyboard)


async def cancel_alcohol_fsm(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=general.general_keyboard)


async def load_drink(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['tg_id'] = message.from_id
        data['drink'] = message.text

    await FSMAddDrink.next()

    await message.reply("üìÖ –ö–æ–≥–¥–∞ –í—ã –µ–≥–æ –≤—ã–ø–∏–ª–∏?\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–ï–ù–¨.–ú–ï–°–Ø–¶.–ì–û–î\n\n"
                        "–ü—Ä–∏ –≤–≤–æ–¥–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–∞–∫–∂–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π.",
                        reply_markup=alcohol.dates_keyboard)


async def load_date(message: types.Message, state: FSMContext):
    if re.match(r"(0?[1-9]|[12][0-9]|3[01]).(0?[1-9]|1[012]).(2023)", message.text):
        async with state.proxy() as data:
            data['date'] = message.text

        await FSMAddDrink.next()

        await message.reply("üç∑ –í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Å—É –Ω–∞–ø–∏—Ç–∫–∞ –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö.", reply_markup=alcohol.quantity_keyboard)
    else:
        await message.reply("–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞!", reply_markup=alcohol.dates_keyboard)


async def load_quantity(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        async with state.proxy() as data:
            data['quantity'] = message.text
        await FSMAddDrink.next()

        await message.reply("üí∏ –ö–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —É –Ω–∞–ø–∏—Ç–∫–∞?", reply_markup=ReplyKeyboardRemove())
    else:
        await message.reply("–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –º–∞—Å—Å–∞!", reply_markup=alcohol.quantity_keyboard)


async def load_price(message: types.Message, state: FSMContext):
    try:
        message.text = message.text.replace(",", ".")

        async with state.proxy() as data:
            data['price'] = float(message.text)

        await db.add_statistics(state)

        async with state.proxy() as data:
            await message.answer(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, –Ω–∞–ø–∏—Ç–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n–ù–∞–ø–∏—Ç–æ–∫: {data['drink']}\n–î–∞—Ç–∞: {data['date']}\n"
                                 f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}–º–ª\n–¶–µ–Ω–∞: {data['price']}",
                                 reply_markup=general.general_keyboard)

        await state.finish()
    except ValueError:
        await message.reply("–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å!", reply_markup=ReplyKeyboardRemove())


def register_handler(dp: Dispatcher):
    dp.register_message_handler(alcohol_start, regexp="üç∏ –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–∏—Ç–æ–∫", state=None)
    dp.register_message_handler(cancel_alcohol_fsm, regexp="–æ—Ç–º–µ–Ω–∞", state="*")
    dp.register_message_handler(cancel_alcohol_fsm, Text(equals="–æ—Ç–º–µ–Ω–∞", ignore_case=True), state="*")
    dp.register_message_handler(load_drink, state=FSMAddDrink.drink)
    dp.register_message_handler(load_date, state=FSMAddDrink.date)
    dp.register_message_handler(load_quantity, state=FSMAddDrink.quantity)
    dp.register_message_handler(load_price, state=FSMAddDrink.price)
